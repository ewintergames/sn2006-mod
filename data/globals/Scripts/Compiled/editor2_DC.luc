-- Cold Fusion LUA Decompiler v1.0.0
-- By 4E534B
-- Date: 11-18-2018 Time: 23:49:10
-- On error(s), send source (compiled) file to 4E534B@gmail.com


function WriteSpeechTable(outFile, actorName, speechTable, ignoreMsg)
	for textMsg, tbl in speechTable do
		if not (ignoreMsg) or (ignoreMsg[textMsg]) then
			gConsole(gConsole["print"], "Ignoring table "..actorName.."->"..textMsg);
		else
			if (tbl) then
				if (type(tbl)=="table") then
					local tblSize=getn(tbl);
					if (tblSize>0) then
						for i=1, tblSize do
							local outLine=(tblSize>1);
							if (addCounterToText) then
								outLine=outLine.."_"..tostring(i);
							end
							
							outLine= outLine..[["	"]]..tbl[i]..[["
]];
							write(outFile, outLine);
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	

end


function WriteSpeechSounds(fileName)
	local outFile=openfile(fileName, "w");
	if not (outFile) then
		gConsole(gConsole["print"], COLOR_RED, "Can't open file for writing"..fileName);
		do return end;
		
	end
	
	gConsole(gConsole["print"], "Writing speech cutscene to "..fileName);
	local heroIgnore={Hit=true,
	HandToHandPunch=true,
	OnJumpEnd=true,
	OnJumpStart=true};
	WriteSpeechTable(outFile, "Sullivan", igHeroSoundSets["Hero"], heroIgnore);
	WriteSpeechTable(outFile, "Tatiana", igHeroSoundSets["Tatiana"], heroIgnore);
	local enemyIgnore={Hit=true,
	Cough=true,
	DeathLong=true,
	DeathShort=true};
	WriteSpeechTable(outFile, "Enemy1", igEnemySoundSets["Enemy1"], enemyIgnore);
	WriteSpeechTable(outFile, "Enemy2", igEnemySoundSets["Enemy2"], enemyIgnore);
	WriteSpeechTable(outFile, "Enemy3", igEnemySoundSets["Enemy3"], enemyIgnore);
	WriteSpeechTable(outFile, "Enemy4", igEnemySoundSets["Enemy4"], enemyIgnore);
	WriteSpeechTable(outFile, "Enemy5", igEnemySoundSets["Enemy5"], enemyIgnore);
	WriteSpeechTable(outFile, "Enemy6", igEnemySoundSets["Enemy6"], enemyIgnore);
	WriteSpeechTable(outFile, "Door", igEnemySoundSets["Door"]);
	WriteSpeechTable(outFile, "Radio", igEnemySoundSets["Radio"]);
	closefile(outFile);

end


function ParseLuaParams()
	local paramsDef=Editor["GetLuaParamsDef"]();
	local paramsVal=Editor["GetLuaParamsVal"]();
	local defString="gParamsDefTable={"..paramsDef.."}";
	defString=gsub(defString, "\\n", " ");
	gConsole(gConsole["print"], "DEFSTRING:"..defString);
	dostring(defString);
	local defTable=gParamsDefTable;
	if not (defTable) then
		gConsole(gConsole["print"], COLOR_RED, "Error: null lua params definition table");
		do return end;
		
	end
	
	gParamsValTable={};
	local valString="self=gParamsValTable; "..paramsVal;
	valString=gsub(valString, "\\n", " ");
	gConsole(gConsole["print"], "VALSTRING:"..valString);
	dostring(valString);
	local valTable=gParamsValTable;
	for i=1, getn(defTable) do
		local propsTable=defTable[i];
		param=propsTable["param"];
		gConsole(gConsole["print"], "param="..param);
		if (propsTable) then
			if (type(propsTable)=="table") then
				Editor["AddLuaParam"](param, tostring(propsTable["type"]));
				for prop, val in propsTable do
					if (type(val)=="table") then
						for v=1, getn(val) do
							Editor["SetLuaParamProp"](param, prop, tostring(val[v]));
						end
						
					else
						Editor["SetLuaParamProp"](param, prop, tostring(val));
					end
					
				end
				
				local paramVal=valTable[param];
				if not ((table)) then
					(table)=propsTable["defVal"];
				end
				
				if ((table)) then
					Editor["SetLuaParamProp"](param, "value", (table));
				end
				
			end
			
		end
		
	end
	

end


function RotateScene()
	local objects={};
	local worldSize=((64 * 16) * gDebug(gDebug["GetFloatFeelAttribute"], "Current scene", "Terrain_cell_size"));
	wf_print(worldSize);
	gSceneIterator(gSceneIterator["Restart"], GS_ALLNODES);
	local obj=gSceneIterator(gSceneIterator["Next"]);
	while (obj) do
		tinsert(objects, obj);
		obj=gSceneIterator(gSceneIterator["Next"]);
	end
	
	wf_print(getn(objects));
	local bigNull=gObjectManager(gObjectManager["CreateObject"], "Null", IDT_Nil, CVector3(CVector3["instance"], (worldSize / 2), 0, (worldSize / 2)));
	for i=1, getn(objects) do
		local o=objects[i];
		o["OldParent"]=o["belongsTo"];
		o(o["ChangeParent"], bigNull);
	end
	
	bigNull(bigNull["SetRotation"], 0, 180, 0);
	for i=1, getn(objects) do
		local o=objects[i];
		o(o["ChangeParent"], o["OldParent"]);
	end
	

end


